module NMS
//non maximum supression
open OpenCvSharp

let area (r:Rect) = r.Width * r.Height |> float

let overlap (r1:Rect) (r2:Rect) = 
    let intr = r1.Intersect r2 |> area
    let union = (area r1) + (area r2) - intr
    intr / union

//main Non Maximum Supression algorithm
//adapted from https://github.com/Nuzhny007/Non-Maximum-Suppression/blob/master/nms.h

let private nms' overlapTh ls =
    let rec innerLoop  acc rem r rs ls =
        match ls with
        | [] -> loop (r::acc) (List.rev rem)
        | (n,ns)::rest ->
            if overlap r n > overlapTh then 
                if n.Height < r.Height && rs - ns < 0.1 then 
                    innerLoop acc rem n rs rest  //prefer smaller rect
                else
                    innerLoop acc rem r rs rest  
            else
                innerLoop acc ((n,ns)::rem) r rs rest

    and loop acc rem = 
        match rem with
        | []            -> acc
        | (r,s)::rest   -> innerLoop acc [] r s rest
    loop [] ls


//nms API method
let nms overlapTh (detections:(Rect*float32)[]) =
    let sorted = detections |> Seq.sortByDescending snd |> Seq.toList
    nms' overlapTh sorted


(*

let testing() =
   let r1  = [|Rect(912,61,34,34),0.71237123f|]
   nms 0.5 0.f 0 r1
   
   let r2s = 
        [|
            (Rect(835,58,49,49),0.733026f)
            (Rect(800,52,78,78),0.770784f)
            (Rect(810,52,78,78),0.894761f)
            (Rect(820,52,78,78),0.979099f)
            (Rect(830,52,78,78),0.887204f)
            (Rect(782,48,92,92),0.651863f)
            (Rect(792,48,92,92),0.951065f)
            (Rect(802,48,92,92),0.971284f)
            (Rect(812,48,92,92),0.998981f)
            (Rect(822,48,92,92),0.999703f)
            (Rect(832,48,92,92),0.997706f)
            (Rect(842,48,92,92),0.958486f)
            (Rect(852,48,92,92),0.947642f)
            (Rect(862,48,92,92),0.977337f)
            (Rect(1032,48,92,92),0.961093f)
            (Rect(1042,48,92,92),0.983866f)
            (Rect(1052,48,92,92),0.917419f)
            (Rect(1062,48,92,92),0.932028f)
            (Rect(1102,48,92,92),0.829665f)
            (Rect(1112,48,92,92),0.950010f)
            (Rect(765,45,107,107),0.802506f)
            (Rect(775,45,107,107),0.960190f)
            (Rect(785,45,107,107),0.981126f)
            (Rect(795,45,107,107),0.992849f)
            (Rect(805,45,107,107),0.999623f)
            (Rect(815,45,107,107),0.999874f)
            (Rect(825,45,107,107),0.999964f)
            (Rect(835,45,107,107),0.999980f)
            (Rect(845,45,107,107),0.999883f)
            (Rect(855,45,107,107),0.999604f)
            (Rect(865,45,107,107),0.922210f)
            (Rect(1015,45,107,107),0.731253f)
            (Rect(1025,45,107,107),0.991995f)
            (Rect(1035,45,107,107),0.998012f)
            (Rect(1045,45,107,107),0.996247f)
            (Rect(1055,45,107,107),0.960625f)
            (Rect(1065,45,107,107),0.984982f)
            (Rect(1075,45,107,107),0.994909f)
            (Rect(1085,45,107,107),0.977291f)
            (Rect(1095,45,107,107),0.989129f)
            (Rect(1105,45,107,107),0.997390f)
            (Rect(1115,45,107,107),0.997469f)
            (Rect(1125,45,107,107),0.985981f)
            (Rect(1135,45,107,107),0.991076f)
            (Rect(1145,45,107,107),0.990400f)
            (Rect(757,42,121,121),0.714266f)
            (Rect(767,42,121,121),0.845508f)
            (Rect(777,42,121,121),0.987333f)
            (Rect(787,42,121,121),0.977531f)
            (Rect(797,42,121,121),0.998844f)
            (Rect(807,42,121,121),0.999539f)
            (Rect(817,42,121,121),0.999917f)
            (Rect(827,42,121,121),0.999995f)
            (Rect(837,42,121,121),0.999882f)
            (Rect(847,42,121,121),0.998830f)
            (Rect(857,42,121,121),0.881036f)
            (Rect(1017,42,121,121),0.671058f)
            (Rect(1027,42,121,121),0.972829f)
            (Rect(1037,42,121,121),0.984563f)
            (Rect(1047,42,121,121),0.880806f)
            (Rect(1057,42,121,121),0.970845f)
            (Rect(1067,42,121,121),0.996158f)
            (Rect(1077,42,121,121),0.984678f)
            (Rect(1087,42,121,121),0.992205f)
            (Rect(1097,42,121,121),0.997920f)
            (Rect(1107,42,121,121),0.999625f)
            (Rect(1117,42,121,121),0.999797f)
            (Rect(1127,42,121,121),0.992852f)
            (Rect(1137,42,121,121),0.997078f)
            (Rect(1147,42,121,121),0.994178f)
            (Rect(1157,42,121,121),0.940301f)
            (Rect(780,39,136,136),0.716205f)
            (Rect(790,39,136,136),0.932153f)
            (Rect(800,39,136,136),0.991256f)
            (Rect(810,39,136,136),0.999158f)
            (Rect(820,39,136,136),0.999917f)
            (Rect(830,39,136,136),0.999829f)
            (Rect(840,39,136,136),0.994553f)
            (Rect(850,39,136,136),0.912233f)
            (Rect(1050,39,136,136),0.902181f)
            (Rect(1060,39,136,136),0.936101f)
            (Rect(1070,39,136,136),0.851388f)
            (Rect(1080,39,136,136),0.850618f)
            (Rect(1090,39,136,136),0.904279f)
            (Rect(1100,39,136,136),0.995885f)
            (Rect(1110,39,136,136),0.989540f)
            (Rect(1120,39,136,136),0.987628f)
            (Rect(1130,39,136,136),0.759916f)
            (Rect(802,35,150,150),0.791184f)
            (Rect(812,35,150,150),0.949770f)
            (Rect(822,35,150,150),0.885533f)
            (Rect(1082,35,150,150),0.765571f)
            (Rect(1092,35,150,150),0.916981f)
            (Rect(1102,35,150,150),0.899904f)
            (Rect(1112,35,150,150),0.930920f)
            (Rect(1085,32,165,165),0.798182f)
            (Rect(1095,32,165,165),0.839723f)
         |]
   nms 0.5 0.f 0 r2s

    let r2s =
        [|(x:805 y:418 width:67 height:67); (x:865 y:418 width:67 height:67);
        (x:810 y:412 width:94 height:94)|]

    let r3s = 
        [|
            (Rect(785,58,67,67),0.848597f)
            (Rect(795,58,67,67),0.986769f)
            (Rect(805,58,67,67),0.999301f)
            (Rect(815,58,67,67),0.878951f)
            (Rect(825,58,67,67),0.999991f)
            (Rect(835,58,67,67),0.999894f)
            (Rect(845,58,67,67),0.990274f)
            (Rect(865,58,67,67),0.999824f)
            (Rect(875,58,67,67),0.758261f)
            (Rect(787,55,80,80),0.875203f)
            (Rect(797,55,80,80),0.995507f)
            (Rect(807,55,80,80),0.999356f)
            (Rect(817,55,80,80),0.999968f)
            (Rect(827,55,80,80),0.999946f)
            (Rect(837,55,80,80),0.999506f)
            (Rect(847,55,80,80),0.853073f)
            (Rect(867,55,80,80),0.904248f)
            (Rect(800,52,94,94),0.999998f)
            (Rect(810,52,94,94),0.999999f)
            (Rect(820,52,94,94),0.999959f)
            (Rect(830,52,94,94),0.999931f)
            (Rect(860,52,94,94),0.877730f)
            (Rect(782,48,107,107),0.811670f)
            (Rect(792,48,107,107),0.999996f)
            (Rect(802,48,107,107),0.999997f)
            (Rect(812,48,107,107),0.999922f)
            (Rect(822,48,107,107),0.999369f)
            (Rect(785,45,121,121),0.966495f)
            (Rect(795,45,121,121),0.945503f)
        |]

   ()


*)